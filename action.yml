name: install-dotnet

description: A simple wrapper over the dotnet-install scripts, exposing more of their functionality to Actions than setup/dotnet.

author: DaNike

branding:
  icon: play
  color: purple
  
inputs:
  version:
    description: The version to install. Passed to the -Channel option of the install scripts.
  quality:
    description: The quality to use. Passed to the -Quality option.
  architecture:
    description: The architecture to install. Passed to -Architecture.
  runtime:
    description: Install only the runtime runtime pack, not the SDK. Passed to -Runtime.
  global-json:
    description: The global.json file to install from. Passed to -JSonFile.
  
runs:
  using: "composite"
  
  steps:
  - shell: pwsh
    env:
      DOTNET_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
      ACTION_PATH: ${{ github.action_path }}
      _VERSION: ${{ inputs.version }}
      _QUALITY: ${{ inputs.quality }}
      _ARCH: ${{ inputs.architecture }}
      _RUNTIME: ${{ inputs.runtime }}
      _JSON: ${{ inputs.global-json }}
      _IS_RUNNER_ARCH: ${{ inputs.architecture == runner.arch }}
    run: |
      $ErrorActionPreference = "Stop";
      
      $scriptCmd = "bash";
      $script = Join-Path $env:ACTION_PATH dotnet-install.sh;
      $versionOpt = "--channel";
      $qualityOpt = "--quality";
      $archOpt = "--architecture";
      $runtimeOpt = "--runtime";
      $jsonOpt = "--jsonfile";
      $installOpt = "--install-dir";
      
      if ($IsWindows)
      {
        $scriptCmd = "powershell";
        $script = Join-Path $env:ACTION_PATH dotnet-install.ps1;
        $versionOpt = "-Channel";
        $qualityOpt = "-Quality";
        $archOpt = "-Architecture";
        $runtimeOpt = "-Runtime";
        $jsonOpt = "-JSonFile"; 
        $installOpt = "-InstallDir";
      }
      
      $version = $env:_VERSION;
      $quality = $env:_QUALITY;
      $arch = $env:_ARCH;
      $runtime = $env:_RUNTIME;
      $json = $env:_JSON;
      $installDir = $env:DOTNET_INSTALL_DIR;
      $isRunnerArch = $env:_IS_RUNNER_ARCH;
      
      if (-not $installDir)
      {
        $installDir = Join-Path (Resolve-Path ~) ".dotnet";
      
        if ($arch -and (Test-Path $installDir) -and -not $isRunnerArch)
        {
          # the install dir already exists; because we're specifying an architecture, and this is an existing install, install to a subdir instead
          $installDir = Join-Path $installDir "arch-$arch";
        }
      }
      
      $args = @();
      if ($IsWindows) { $args += @("-SkipNonVersionedFiles", "-NoPath"); }
      else { $args += @("--skip-non-versioned-files", "--no-path"); }
      
      if ($version) { $args += @($versionOpt,$version); }
      if ($quality) { $args += @($qualityOpt,$quality); }
      if ($arch) { $args += @($archOpt,$arch); }
      if ($runtime) { $args += @($runtimeOpt,$runtime); }
      if ($json) { $args += @($jsonOpt,$json); }
      if ($installDir) { $args += @($installOpt,$installDir); }
      
      echo "Running '$scriptCmd $script $args'";
      &$scriptCmd $script @args;
      if (-not $?) { exit $LastExitCode; }
      
      if ($installDir)
      {
        echo "DOTNET_MULTILEVEL_LOOKUP=0" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append;
        echo "DOTNET_INSTALL_DIR=$installDir" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append;
        if ($IsWindows -and $arch -eq "x86")
        {
            echo "DOTNET_ROOT(x86)=$installDir" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append;
        }
        else
        {
            echo "DOTNET_ROOT=$installDir" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append;
        }
        echo $installDir | Out-File $env:GITHUB_PATH -Encoding utf8 -Append
      }
      echo "::add-matcher::$(Join-Path $env:ACTION_PATH csc.json)";